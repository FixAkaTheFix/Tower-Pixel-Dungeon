package com.fixakathefix.towerpixeldungeon.levels.endlessarenas;

import static com.fixakathefix.towerpixeldungeon.Dungeon.hero;
import static com.fixakathefix.towerpixeldungeon.Dungeon.level;

import com.fixakathefix.towerpixeldungeon.Assets;
import com.fixakathefix.towerpixeldungeon.Dungeon;
import com.fixakathefix.towerpixeldungeon.actors.Char;
import com.fixakathefix.towerpixeldungeon.actors.buffs.Buff;
import com.fixakathefix.towerpixeldungeon.actors.buffs.WaveCooldownBuff;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Bat;
import com.fixakathefix.towerpixeldungeon.actors.mobs.BossTroll;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Brute;
import com.fixakathefix.towerpixeldungeon.actors.mobs.DM100;
import com.fixakathefix.towerpixeldungeon.actors.mobs.DM200;
import com.fixakathefix.towerpixeldungeon.actors.mobs.DM201;
import com.fixakathefix.towerpixeldungeon.actors.mobs.DMW;
import com.fixakathefix.towerpixeldungeon.actors.mobs.DMWHead;
import com.fixakathefix.towerpixeldungeon.actors.mobs.DMWMinion;
import com.fixakathefix.towerpixeldungeon.actors.mobs.DMWWheels;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Gnoll;
import com.fixakathefix.towerpixeldungeon.actors.mobs.GnollThrower;
import com.fixakathefix.towerpixeldungeon.actors.mobs.GnollTrickster;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Goblin;
import com.fixakathefix.towerpixeldungeon.actors.mobs.GoblinFat;
import com.fixakathefix.towerpixeldungeon.actors.mobs.GoblinGiant;
import com.fixakathefix.towerpixeldungeon.actors.mobs.GoblinNinja;
import com.fixakathefix.towerpixeldungeon.actors.mobs.GoblinSand;
import com.fixakathefix.towerpixeldungeon.actors.mobs.GoblinShaman;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Mob;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Rat;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Slugger;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Spinner;
import com.fixakathefix.towerpixeldungeon.actors.mobs.Swarm;
import com.fixakathefix.towerpixeldungeon.actors.mobs.npcs.NewShopKeeper;
import com.fixakathefix.towerpixeldungeon.actors.mobs.towers.TowerPylonBroken;
import com.fixakathefix.towerpixeldungeon.items.Generator;
import com.fixakathefix.towerpixeldungeon.items.Gold;
import com.fixakathefix.towerpixeldungeon.items.Heap;
import com.fixakathefix.towerpixeldungeon.items.food.SmallRation;
import com.fixakathefix.towerpixeldungeon.items.potions.brews.CausticBrew;
import com.fixakathefix.towerpixeldungeon.items.potions.elixirs.ElixirOfToxicEssence;
import com.fixakathefix.towerpixeldungeon.items.potions.exotic.PotionOfCorrosiveGas;
import com.fixakathefix.towerpixeldungeon.levels.Arena;
import com.fixakathefix.towerpixeldungeon.levels.Terrain;
import com.fixakathefix.towerpixeldungeon.levels.features.LevelTransition;
import com.fixakathefix.towerpixeldungeon.messages.Messages;
import com.fixakathefix.towerpixeldungeon.scenes.GameScene;
import com.fixakathefix.towerpixeldungeon.utils.GLog;
import com.fixakathefix.towerpixeldungeon.windows.WndModes;
import com.watabou.noosa.audio.Music;
import com.watabou.utils.Random;

import java.util.ArrayList;

public class EndlessArena5 extends Arena {

    {
        name = "Bot factory";

        color1 = 0x48763c;
        color2 = 0x59994a;
        viewDistance = 15;
        WIDTH = 79;
        HEIGHT = 79;

        amuletCell = 39 + WIDTH*39;
        exitCell = amuletCell;
        towerShopKeeperCell = 29 + WIDTH*35;
        normalShopKeeperCell = 24 + WIDTH*35;

        arenaDepth = 15;

        startGold = 8000;
        maxWaves = 12000;
        waveCooldownNormal = 10;
        waveCooldownBoss = 200;

        waterIsToxic = true;
    }


    @Override
    public int mobsToDeploy(int wave) {
        int num = 0;
        switch (wave % 15){
            case 1: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 10;break;
            case 2: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 10;break;
            case 3: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 10;break;
            case 4: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 5;break;
            case 5: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 7;break;
            case 6: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5) * 5;break;
            case 7: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5) * 2;break;
            case 8: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5) * 2;break;
            case 9: num = (wave*  (int)Math.sqrt(Math.sqrt(wave))/5) * 3;break;
            case 10: num = (wave* (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 2;break;
            case 11: num = (wave* (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 7;break;
            case 12: num = (wave* (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 10;break;
            case 13: num = (wave* (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 2;break;
            case 14: num = (wave* (int)Math.sqrt(Math.sqrt(wave))/5 + 1) * 3;break;
            case 0: num = wave/9;break;
        }
        return num;
    }
    @Override
    public Mob chooseMob(int wave) {
        Mob mob = new Rat();
        switch (wave % 15){
            case 1: mob = new DM100(); break;
            case 2: mob = new DMWMinion(); break;
            case 3: mob = Random.oneOf(
                    new DM100(),
                    new DMWMinion()
            ); break;
            case 4: mob = new DM200(); break;
            case 5: mob = Random.oneOf(
                    new DMWMinion(),
                    new DM200()
            ); break;
            case 6: mob = new DM200(); break;
            case 7: mob = new DMWHead(); break;
            case 8: mob = new DMWWheels(); break;
            case 9: mob = Random.oneOf(
                    new DM201(),
                    new DM200()
            ); break;
            case 10: mob = Random.oneOf(
                    new DMWWheels(),
                    new DMWHead()
            ); break;
            case 11: if (!bossSpawned) {
                bossSpawned = true;
                mob = new DMW();
            }
            else mob = Random.oneOf(
                        new DM100(),
                        new DMWMinion());
            break;
            case 12: mob = new DMWMinion(); break;
            case 13: mob = new DMWWheels(); break;
            case 14: mob = new Slugger(); break;
            case 0:  mob = new DMW(); break;
        }
        if (level.mode == WndModes.Modes.CHALLENGE){
            affectMob(mob);
        }
        mob.alignment = Char.Alignment.ENEMY;
        return mob;
    }

    public void deployMobs(int wave) {
        if (wave % 15 == 6 || wave % 15 == 13) deploymobs(wave, Direction.RANDOM, 5);
        if (wave % 15 == 14) deploymobs(wave, Direction.TOOLEFT, 5);
        else if (wave % 15 == 2) deploymobs(wave, Direction.RANDOM, 10);
        else switch (wave%4){
            case 0: deploymobs(wave, Direction.TOORIGHT, 1); break;
            case 1: deploymobs(wave, Direction.TOOUP, 1); break;
            case 2: deploymobs(wave, Direction.TOOLEFT, 1); break;
            case 3: deploymobs(wave, Direction.TOODOWN, 1); break;
        }
    }




    public void addDestinations() {
        ArrayList<Integer> candidates = new ArrayList<>();
        for (int m = 0; m < WIDTH * HEIGHT; m++) {
            if (this.passable[m] && this.distance(amuletCell, m) > 10) candidates.add(m);
        }
        for (int i = 0;i<5;i++){
            this.drop(new Gold(Random.Int(30, 50)), Random.element(candidates));
            this.drop(Generator.random(Generator.Category.POTION), Random.element(candidates));
            this.drop(Generator.randomUsingDefaults(Generator.Category.SCROLL2), Random.element(candidates));
            this.drop(new SmallRation(), Random.element(candidates)).type = Heap.Type.SKELETON;
            this.drop(Generator.random(Generator.Category.STONE), Random.element(candidates));
            this.drop(Generator.random(Generator.Category.POTION), Random.element(candidates));
            this.drop(Random.oneOf(new CausticBrew(), new ElixirOfToxicEssence(), new PotionOfCorrosiveGas()), Random.element(candidates));
            this.drop(Generator.random(Generator.Category.MISSILE), Random.element(candidates));
            this.drop(Generator.random(Generator.Category.BOMB), Random.element(candidates));
        }
        super.addDestinations();
    }



    @Override
    public void playLevelMusic() {
        Music.INSTANCE.playTracks(
                new String[]{Assets.Music.GOBLIN_GROTTO},
                new float[]{1},
                false);
    }

    @Override
    public void doStuffEndwave(int wave) {
        int goldAdd = 900;
        Dungeon.gold+=goldAdd;
        GLog.w(Messages.get(Arena.class, "goldaddendwave", goldAdd));
        ArrayList<Integer> candidates = new ArrayList<>();
        for (int m = 0; m<WIDTH*HEIGHT;m++){
            if (this.passable[m] && distance(amuletCell, m)>12) candidates.add(m);
        }

        GLog.p(Messages.get(Arena.class, "lootdrop", goldAdd));
        this.drop(Random.oneOf(
                Generator.random(Generator.Category.POTION),
                Generator.random(Generator.Category.SCROLL2),
                Generator.random(Generator.Category.STONE),
                Generator.random(Generator.Category.BOMB)),  Random.element(candidates));
        this.drop(Generator.random(),  Random.element(candidates));

        for (Heap heap : Dungeon.level.heaps.valueList()) {
            heap.sprite.link(heap);
            heap.sprite.update();
        }
        super.doStuffEndwave(wave);
    }


    @Override
    protected boolean build() {

        setSize(WIDTH,HEIGHT);
        //base room


        map = new int[]{};

        buildFlagMaps();
        LevelTransition exit = new LevelTransition(this, exitCell, LevelTransition.Type.REGULAR_EXIT);

        transitions.add(exit);

        this.map[exitCell] = Terrain.EXIT;
        this.map[amuletCell] = Terrain.PEDESTAL;

        return true;
    }




    @Override
    public void initNpcs() {
        Buff.affect(hero, WaveCooldownBuff.class, 30);
        ArrayList<Integer> cands = new ArrayList<>();
        cands.add(amuletCell+4);
        cands.add(amuletCell-4);
        cands.add(amuletCell+4*WIDTH);
        cands.add(amuletCell-4*WIDTH);
        for (int i : cands){
            TowerPylonBroken pylon = new TowerPylonBroken();
            pylon.pos = i;
            GameScene.add(pylon);
        }
        super.initNpcs();
    }



    @Override
    public String tilesTex() {
        return Assets.Environment.TILES_CAVES;
    }

    @Override
    public String waterTex() {
        return Assets.Environment.WATER_TOXIC;
    }

}